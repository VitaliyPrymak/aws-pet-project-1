services:
 
  frontend:
    build:
      context: ./frontend  
      dockerfile: Dockerfile  
    ports:
      - "80:80"  
    depends_on:
      - backend_rds  
      - backend_redis
    
    networks:
      - app-network  

  backend_rds:
    build:
      context: ./backend_rds  
      dockerfile: Dockerfile  
    ports:
      - "8000:8000"
    depends_on:
      - db  
    environment:
      - DB_HOST=${DATABASE_HOST}
      - DB_PORT=${DATABASE_PORT}
      - DB_USER=${DATABASE_USER}
      - DB_PASSWORD=${DATABASE_PASSWORD}
      - DB_NAME=${DATABASE_NAME}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
    networks:
      - app-network  

  backend_redis:
    build:
      context: ./backend_redis  
      dockerfile: Dockerfile  
    ports:
      - "4000:4000"
   
    depends_on:
      - redis  
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT} 
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
    command: python manage.py runserver 0.0.0.0:4000
    networks:
      - app-network  

  db:
    image: postgres:13 
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: mydatabase
    ports:
      - "5432:5432"  
    volumes:
      - db_data:/var/lib/postgresql/data  
    networks:
      - app-network  

  redis:
    image: redis:latest 
    ports:
      - "6379:6379"  
    networks:
      - app-network  

networks:
  app-network:
    driver: bridge

volumes:
  redis_data:
    driver: local  
  db_data:
    driver: local 